{
  "_args": [
    [
      {
        "raw": "gulp-nunjucks",
        "scope": null,
        "escapedName": "gulp-nunjucks",
        "name": "gulp-nunjucks",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/tyler/Downloads/kah"
    ]
  ],
  "_from": "gulp-nunjucks@latest",
  "_id": "gulp-nunjucks@3.0.0",
  "_inCache": true,
  "_location": "/gulp-nunjucks",
  "_nodeVersion": "4.6.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/gulp-nunjucks-3.0.0.tgz_1483656915393_0.6665360815823078"
  },
  "_npmUser": {
    "email": "sindresorhus@gmail.com",
    "name": "sindresorhus"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gulp-nunjucks",
    "name": "gulp-nunjucks",
    "raw": "gulp-nunjucks",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-nunjucks/-/gulp-nunjucks-3.0.0.tgz",
  "_shasum": "77cb31d61632a1ae10d2e1f8c0a8cf82659fcf47",
  "_shrinkwrap": null,
  "_spec": "gulp-nunjucks",
  "_where": "/home/tyler/Downloads/kah",
  "author": {
    "email": "sindresorhus@gmail.com",
    "name": "Sindre Sorhus",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/gulp-nunjucks/issues"
  },
  "dependencies": {
    "gulp-util": "^3.0.0",
    "nunjucks": "^3.0.0",
    "through2": "^2.0.0"
  },
  "description": "Compile/precompile Nunjucks templates",
  "devDependencies": {
    "ava": "*",
    "gulp-data": "^1.2.1",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "77cb31d61632a1ae10d2e1f8c0a8cf82659fcf47",
    "tarball": "https://registry.npmjs.org/gulp-nunjucks/-/gulp-nunjucks-3.0.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "497a3f803c75a458541872fa0f0d9ac5a8b8e0cc",
  "homepage": "https://github.com/sindresorhus/gulp-nunjucks#readme",
  "keywords": [
    "compile",
    "django",
    "gulpplugin",
    "html",
    "javascript",
    "jinja",
    "jinja2",
    "nunjucks",
    "precompile",
    "template",
    "templating",
    "view"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "gulp-nunjucks",
  "optionalDependencies": {},
  "readme": "# gulp-nunjucks [![Build Status](https://travis-ci.org/sindresorhus/gulp-nunjucks.svg?branch=master)](https://travis-ci.org/sindresorhus/gulp-nunjucks)\n\n> Compile/precompile [Nunjucks](https://mozilla.github.io/nunjucks/) templates\n\n*Issues with the output should be reported on the Nunjucks [issue tracker](https://github.com/mozilla/nunjucks/issues).*\n\n\n## Install\n\n```\n$ npm install --save-dev gulp-nunjucks\n```\n\n\n## Usage\n\n### Compile\n\n```js\nconst gulp = require('gulp');\nconst nunjucks = require('gulp-nunjucks');\n\ngulp.task('default', () =>\n\tgulp.src('templates/greeting.html')\n\t\t.pipe(nunjucks.compile({name: 'Sindre'}))\n\t\t.pipe(gulp.dest('dist'))\n);\n```\n\nYou can alternatively use [gulp-data](https://github.com/colynb/gulp-data) to inject the data:\n\n```js\nconst gulp = require('gulp');\nconst nunjucks = require('gulp-nunjucks');\nconst data = require('gulp-data');\n\ngulp.task('default', () =>\n\tgulp.src('templates/greeting.html')\n\t\t.pipe(data(() => ({name: 'Sindre'})))\n\t\t.pipe(nunjucks.compile())\n\t\t.pipe(gulp.dest('dist'))\n);\n```\n\n### Precompile\n\n```js\nconst gulp = require('gulp');\nconst nunjucks = require('gulp-nunjucks');\n\ngulp.task('default', () =>\n\tgulp.src('templates/greeting.html')\n\t\t.pipe(nunjucks.precompile())\n\t\t.pipe(gulp.dest('dist'))\n);\n```\n\n\n## API\n\n### nunjucks.compile([data], [options])\n\nCompile a template using the provided `data`.\n\n#### data\n\nType: `object`\n\nThe data object used to populate the text.\n\n#### options\n\nType: `object`\n\nOptions will be passed directly to the Nunjucks [Environment constructor](https://mozilla.github.io/nunjucks/api.html#constructor) which will be used to compile templates.\n\n##### options.env\n\nType: `nunjucks.Environment`<br>\nDefault: *`new nunjucks.Environment()`*\n\nThe custom Nunjucks [Environment object](https://mozilla.github.io/nunjucks/api.html#environment) which will be used to compile templates. If supplied, the rest of `options` will be ignored.\n\n### nunjucks.precompile([options])\n\nPrecompile a template for rendering dynamically at a later time.\n\nSame options as [`nunjucks.precompile()`](https://mozilla.github.io/nunjucks/api.html#precompile) except for `name`.\n\n#### options.name\n\nType: `function`<br>\nDefault: *Relative template path. Example: `templates/list.html`*\n\nYou can override the default behavior by supplying a function which gets the current [File](https://github.com/wearefractal/vinyl#constructoroptions) object and is expected to return the name.\n\nExample:\n\n```js\n{\n\tname: file => `tpl-${file.relative}`\n}\n```\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/gulp-nunjucks.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "3.0.0",
  "xo": {
    "esnext": true
  }
}
